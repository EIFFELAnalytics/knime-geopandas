<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="Inspect Shape__2211274788567430974.xml">
<entry key="category" type="xstring" value="Data Mining"/>
<entry key="title" type="xstring" value="Inspect Shape"/>
<entry key="description" type="xstring" value=""/>
<entry key="sourcecode" type="xstring" value="# VIEW SHAPE%%00010# View: Image output after node execution%%00010from io import BytesIO%%00010import geopandas as gpd%%00010import pandas as pd%%00010from shapely import wkt as WKT%%00010%%00010# Convent pandas (with wkt column) to geopandas (with geometry column)%%00010def df_to_gdf(df):%%00010    gdf = gpd.GeoDataFrame(df, copy=True)%%00010    gdf['geometry'] = df.wkt.apply(WKT.loads)%%00010    gdf.drop(columns='wkt', inplace=True)%%00010    return gdf%%00010%%00010# Convert input_table to geodataframe%%00010gdf = df_to_gdf(input_table)%%00010%%00010# Create buffer to write into%%00010buffer = BytesIO()%%00010%%00010# Create plot and write into the buffer%%00010gdf.plot().get_figure().savefig(buffer, format='png')%%00010%%00010# The output is the content of the buffer%%00010output_image = buffer.getvalue()%%00010%%00010# PRINT INFO%%00010# View: Standard output after node execution%%00010import numpy as np%%00010import re%%00010print('Size of output_table:', input_table.shape)%%00010print('Average number of character/geometry %.1f' % %%00010      np.mean(input_table.wkt.apply(lambda wkt: len(wkt))))%%00010print('Average number of points/geometry: %.1f' % %%00010      np.mean(input_table.wkt.apply(lambda wkt: len(wkt.split(',')))))%%00010print('Average precision/point: %.1f' % %%00010      np.mean(%%00010          input_table.wkt.apply(lambda wkt: %%00010          np.mean([len(decimals) for decimals in re.findall('[0-9]+\.([0-9]*)', wkt)]))%%00010     ))%%00010print('\n')%%00010%%00010# Show first 5 rows%%00010try:%%00010    # This look better in Jupyter Notebook%%00010    display(input_table.head())%%00010except NameError:%%00010    print(input_table.head())"/>
</config>
